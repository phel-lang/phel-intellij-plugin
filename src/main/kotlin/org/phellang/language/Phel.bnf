{
  generate=[tokenAccessors="no"]
  parserClass='org.phellang.language.parser.PhelParser'
  psiPackage='org.phellang.language.psi'
  psiImplPackage='org.phellang.language.psi.impl'

  psiClassPrefix='Phel'

  elementTypeHolderClass="org.phellang.language.psi.PhelTypes"
  elementTypeClass="org.phellang.language.psi.PhelElementType"
  tokenTypeClass="org.phellang.language.psi.PhelTokenType"

  tokens=[
    whitespace='regexp:\s+'
    line_comment='LINE_COMMENT'
    multiline_comment='MULTILINE_COMMENT'
    string='regexp:"([^"]|\\")*"'
    number='regexp:[+-]?[0-9]+(\.[0-9]*)?([eE][+-]?[0-9]+)?'
    hexnum='regexp:[+-]?0x[\da-fA-F_]+'
    binnum='regexp:[+-]?0b[01_]+'
    octnum='regexp:[+-]?0o[0-7_]+'
    char='regexp:\\([btrnf]|u[0-9a-fA-F]{4}|o[0-7]{3}|backspace|tab|newline|formfeed|return|space|.)'
    bool="regexp:true|false"
    nil='nil'
    nan='NAN'
    sym="regexp:[\w<>$%&=*+\-!?_|\\@--#][\w.<>$%&=*+\-!?_|'#\\@]*((:[\w<>$%&=*+\-!?_'])+)?"

    paren1='('
    paren2=')'
    bracket1='['
    bracket2=']'
    brace1='{'
    brace2='}'
    colon=':'
    coloncolon='::'
    comma=','
    comma_at=',@'
    quote="'"
    syntax_quote="`"

    hat="^"
    tilde="~"
    tilde_at="~@"
    form_comment="#_"
    hash_brace="#{"
    fn_short="|("

    dot='.'
    dotdash='.-'
    
    keyword_token='KEYWORD_TOKEN'
  ]
  extends("p_form|s_form")=form
  extends("map|l_v_form")=p_form
  extends("vec|list")=l_v_form

  extends("symbol|keyword|literal|access")=s_form

  extends("symbol_.*")=symbol
  elementType("symbol_.*")=symbol
  elementType("access_.*")=access
  pin("list|vec|map")="'[\(\[\{]'"

  name("metadata")=form

  consumeTokenMethod("symbol_nsq")="fast"
}

root ::= form *
private not_eof ::= !<<eof>>

form ::= form_prefix form_prefix * form_upper | form_inner | form_comment_macro | multiline_comment | line_comment
  {pin(".*")=1 methods=[form="" metas="metadata" readerMacros="reader_macro"] mixin="org.phellang.language.psi.PhelFormMixin"}
private form_prefix ::= metadata | reader_macro

upper form_upper ::= form_inner {elementType=form name=form}
private form_inner ::= p_forms | s_forms
private p_forms ::= list | vec | map | set | short_fn
private s_forms ::= symbol access_left? | keyword | literal | access

fake p_form ::= form * {methods=[forms="form"]}
fake l_v_form ::= set
fake s_form ::=
list ::= '(' list_body ')'
  {mixin="org.phellang.language.psi.PhelListMixin"}
vec ::= '[' vec_body ']'
map ::= '{' map_body '}'
set ::= '#{' set_body '}'
symbol ::= symbol_qualified
  {extends="org.phellang.language.psi.PhelNamedElementImpl"
   implements="com.intellij.psi.PsiNameIdentifierOwner"}
keyword ::= keyword_token | (':' | '::') symbol_qualified
private symbol_qualified ::= symbol_plain symbol_nsq?
symbol_plain ::= sym
left symbol_nsq ::= '/' (sym | coloncolon | dot | dotdash | hat | tilde)
literal ::= number | hexnum | binnum | octnum | bool | nil | nan | string | char
  {mixin="org.phellang.language.psi.PhelLiteralMixin"}

access ::= ('.' | '.-') symbol
left access_left ::= ! '.'

metadata ::= "^" (string | symbol | keyword | map)
  {mixin="org.phellang.language.psi.PhelMetadataMixin"}
reader_macro ::= "'" | "~" | "~@" | "`" | "," | ",@"
  {mixin="org.phellang.language.psi.PhelReaderMacroMixin"}

form_comment_macro ::= "#_" form
short_fn ::= "|(" list_body ")"

private meta items ::= <<items_entry <<recover>> <<param>>>> * {recoverWhile="<<recover>>"}
private meta items_entry ::= (not_eof <<recover>>) <<param>>
private list_body ::= <<items !')' form>>

private vec_body ::= <<items !']' form>>
private map_body ::= <<items !'}' map_entry>>
private map_entry ::=  form form {pin=2}
private set_body ::= <<items !'}' form>>