// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/org/phellang/language/Phel.flex

package org.phellang.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.phellang.language.psi.PhelTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class PhelLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\1\0\1\15\1\16\6\17\2\20"+
    "\1\21\1\22\4\0\1\23\1\24\3\25\1\26\1\25"+
    "\7\0\1\27\14\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\0"+
    "\1\44\1\0\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\0\1\53\1\54\1\55\1\56\1\0\1\57\1\60"+
    "\2\0\1\61\1\62\1\63\1\64\6\0\1\3\32\0"+
    "\1\65\u01bf\0\12\66\206\0\12\66\306\0\12\66\234\0"+
    "\12\66\166\0\12\66\140\0\12\66\166\0\12\66\106\0"+
    "\12\66\u0116\0\12\66\106\0\12\66\346\0\1\65\u015f\0"+
    "\12\66\46\0\12\66\u012c\0\12\66\200\0\12\66\246\0"+
    "\12\66\6\0\12\66\266\0\12\66\126\0\12\66\206\0"+
    "\12\66\6\0\12\66\246\0\13\65\35\0\2\3\5\0"+
    "\1\65\57\0\1\65\240\0\1\65\u01cf\0\12\66\46\0"+
    "\12\66\306\0\12\66\26\0\12\66\126\0\12\66\u0196\0"+
    "\12\66\6\0\u0100\67\240\0\12\66\206\0\12\66\u012c\0"+
    "\12\66\200\0\12\66\74\0\12\66\220\0\12\66\166\0"+
    "\12\66\146\0\12\66\206\0\12\66\106\0\12\66\266\0"+
    "\12\66\u0164\0\62\66\100\0\12\66\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\2\12\1\13\1\4\1\3\1\1"+
    "\1\14\1\1\1\15\1\16\1\17\3\1\1\20\1\1"+
    "\1\21\1\22\2\23\1\3\1\24\1\1\1\4\1\25"+
    "\1\26\1\27\1\30\1\31\1\12\4\1\1\32\1\33"+
    "\1\1\12\34\3\1\1\35\1\36\1\37\1\24\1\0"+
    "\1\1\1\12\1\40\1\41\1\42\1\43\11\1\1\44"+
    "\10\1\1\45\14\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u0188\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0188\0\u0348\0\u0188\0\u0380\0\u0188\0\160\0\u0188"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0188\0\u0460\0\u0188\0\u0498\0\u0188"+
    "\0\u04d0\0\u0508\0\160\0\u0540\0\u0578\0\u0188\0\u0188\0\u0188"+
    "\0\u0188\0\160\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u06c8\0\u0700\0\160\0\u0188\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u0188"+
    "\0\u0188\0\u0188\0\u0188\0\u09a0\0\u09d8\0\u09d8\0\u0620\0\u0658"+
    "\0\u0690\0\160\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\160\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\160\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0850\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\16\3\17\1\20\1\21"+
    "\1\22\3\3\1\23\1\24\1\25\1\26\1\27\1\3"+
    "\1\30\5\3\1\31\4\3\1\32\4\3\1\33\3\3"+
    "\1\34\1\35\1\36\1\37\1\5\2\3\62\40\1\41"+
    "\5\40\1\3\2\0\2\3\4\0\1\3\1\0\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\23\3"+
    "\1\0\1\3\1\0\4\3\1\0\3\4\61\0\1\4"+
    "\2\0\1\3\2\4\1\5\1\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\23\3\1\0\1\3\1\0\1\3\1\5\2\3\1\6"+
    "\2\42\1\6\1\43\4\42\1\6\1\42\10\6\1\42"+
    "\4\6\1\42\1\44\1\42\2\6\1\42\23\6\1\42"+
    "\1\6\1\42\4\6\34\45\1\46\24\45\1\47\1\50"+
    "\5\45\70\0\1\3\2\0\2\3\4\0\1\3\1\0"+
    "\2\3\1\16\3\17\2\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\23\3\1\0\1\3\1\0\4\3"+
    "\23\0\1\51\44\0\1\3\2\0\2\3\4\0\1\3"+
    "\1\0\1\52\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\1\3\1\53\4\17\2\3"+
    "\1\0\2\3\1\54\1\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\55\2\3\1\54\6\3\1\56\6\3"+
    "\1\57\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\1\3\1\53\4\17\2\3\1\0\2\3"+
    "\1\54\1\3\1\0\1\3\1\0\2\3\1\0\4\3"+
    "\1\54\16\3\1\0\1\3\1\0\4\3\1\60\2\0"+
    "\2\60\4\0\1\60\1\0\6\60\1\61\1\60\1\0"+
    "\4\60\1\0\1\60\1\0\2\60\1\0\23\60\1\0"+
    "\1\60\1\0\4\60\1\21\1\45\1\0\1\3\1\21"+
    "\4\45\1\21\1\45\10\21\1\45\4\21\1\45\1\21"+
    "\1\45\2\21\1\45\23\21\1\45\1\21\1\45\3\21"+
    "\2\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\1\62\3\3\1\0\1\3\1\0\2\3\1\0\23\3"+
    "\1\0\1\3\1\0\4\3\1\63\1\64\1\0\1\3"+
    "\1\63\4\64\1\63\1\64\10\63\1\64\4\63\1\64"+
    "\1\63\1\64\2\63\1\64\1\63\1\65\3\63\1\66"+
    "\4\63\1\67\1\70\1\63\1\71\1\72\1\73\1\74"+
    "\2\63\1\64\1\63\1\64\3\63\2\3\2\0\2\3"+
    "\4\0\1\3\1\0\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\75\22\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\6\3\1\76"+
    "\14\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\77\5\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\2\0\1\100\1\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\23\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\101\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\102\62\0\4\42\1\103\24\42\1\104\36\42\1\6"+
    "\1\42\1\0\1\3\1\6\4\42\1\6\1\42\10\6"+
    "\1\42\4\6\1\42\1\6\1\42\2\6\1\42\23\6"+
    "\1\42\1\6\1\42\3\6\1\3\2\45\2\0\63\45"+
    "\1\0\1\3\2\0\2\3\4\0\1\3\1\0\2\3"+
    "\4\53\2\3\1\0\2\3\1\54\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\54\16\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\105\1\0\1\105"+
    "\1\3\4\106\2\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\2\3\2\107\4\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\1\107\1\0\23\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\2\3\3\110\3\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\1\110\1\0\23\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\2\3\4\111"+
    "\2\3\1\0\3\111\1\3\1\0\1\3\1\0\1\3"+
    "\1\111\1\0\6\111\15\3\1\0\1\3\1\0\2\3"+
    "\1\111\1\3\1\60\2\0\2\60\4\0\1\60\1\0"+
    "\10\60\1\0\4\60\1\0\1\60\1\0\2\60\1\0"+
    "\23\60\1\0\1\60\1\0\4\60\1\3\2\0\2\3"+
    "\4\0\1\3\1\0\10\3\1\0\3\3\1\112\1\0"+
    "\1\3\1\0\2\3\1\0\23\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\1\113\22\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\10\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\13\3\1\114\7\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\4\3\1\115\16\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\2\3\3\116\3\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\23\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\4\3\1\117\16\3"+
    "\1\0\1\3\1\0\5\3\2\0\2\3\4\0\1\3"+
    "\1\0\10\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\14\3\1\120\6\3\1\0\1\3\1\0\5\3"+
    "\2\0\2\3\4\0\1\3\1\0\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\2\3\1\0\1\121\22\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\2\3\4\122\2\3\1\0\3\122\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\6\122\15\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\10\3\1\123"+
    "\12\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\10\3\1\124\12\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\20\3\1\125"+
    "\2\3\1\0\1\3\1\0\4\3\2\42\2\0\63\42"+
    "\1\0\1\3\2\0\2\3\4\0\1\3\1\0\2\3"+
    "\4\106\2\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\23\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\126\20\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\127\5\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\21\3\1\130\1\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\2\3"+
    "\3\131\3\3\1\0\4\3\1\0\1\3\1\0\2\3"+
    "\1\0\23\3\1\0\1\3\1\0\5\3\2\0\2\3"+
    "\4\0\1\3\1\0\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\132\3\3\1\0\1\3"+
    "\1\0\5\3\2\0\2\3\4\0\1\3\1\0\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\2\3\1\0\1\133"+
    "\22\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\63\21\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\2\3\4\134"+
    "\2\3\1\0\3\134\1\3\1\0\1\3\1\0\2\3"+
    "\1\0\6\134\15\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\125\4\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\135\16\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\136\13\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\11\3\1\137\11\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\10\3\1\140\12\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\2\3\3\63\3\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\20\3\1\141\2\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\142\20\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\2\3\4\143\2\3\1\0"+
    "\3\143\1\3\1\0\1\3\1\0\2\3\1\0\6\143"+
    "\15\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\16\3\1\144\4\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\5\3\1\145"+
    "\15\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\6\3\1\146\14\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\2\3\1\0\15\3\1\147"+
    "\5\3\1\0\1\3\1\0\5\3\2\0\2\3\4\0"+
    "\1\3\1\0\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\63\16\3\1\0\1\3\1\0"+
    "\5\3\2\0\2\3\4\0\1\3\1\0\2\3\4\63"+
    "\2\3\1\0\3\63\1\3\1\0\1\3\1\0\2\3"+
    "\1\0\6\63\15\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\4\3\1\150\16\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\12\3\1\142\10\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\12\3\1\63\10\3\1\0"+
    "\1\3\1\0\5\3\2\0\2\3\4\0\1\3\1\0"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\151\16\3\1\0\1\3\1\0\5\3\2\0"+
    "\2\3\4\0\1\3\1\0\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\63\17\3\1\0"+
    "\1\3\1\0\4\3";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4144];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\1\3\11\7\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\5\1\4\11\12\1\1\11\13\1\4\11\1\0"+
    "\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PhelTypes.SYM;
            }
          // fall through
          case 38: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 4:
            { return PhelTypes.LINE_COMMENT;
            }
          // fall through
          case 41: break;
          case 5:
            { return PhelTypes.QUOTE;
            }
          // fall through
          case 42: break;
          case 6:
            { return PhelTypes.PAREN1;
            }
          // fall through
          case 43: break;
          case 7:
            { return PhelTypes.PAREN2;
            }
          // fall through
          case 44: break;
          case 8:
            { return PhelTypes.COMMA;
            }
          // fall through
          case 45: break;
          case 9:
            { return PhelTypes.DOT;
            }
          // fall through
          case 46: break;
          case 10:
            { return PhelTypes.NUMBER;
            }
          // fall through
          case 47: break;
          case 11:
            { return PhelTypes.COLON;
            }
          // fall through
          case 48: break;
          case 12:
            { return PhelTypes.BRACKET1;
            }
          // fall through
          case 49: break;
          case 13:
            { return PhelTypes.BRACKET2;
            }
          // fall through
          case 50: break;
          case 14:
            { return PhelTypes.HAT;
            }
          // fall through
          case 51: break;
          case 15:
            { return PhelTypes.SYNTAX_QUOTE;
            }
          // fall through
          case 52: break;
          case 16:
            { return PhelTypes.BRACE1;
            }
          // fall through
          case 53: break;
          case 17:
            { return PhelTypes.BRACE2;
            }
          // fall through
          case 54: break;
          case 18:
            { return PhelTypes.TILDE;
            }
          // fall through
          case 55: break;
          case 19:
            { return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 56: break;
          case 20:
            { return PhelTypes.STRING;
            }
          // fall through
          case 57: break;
          case 21:
            { return PhelTypes.FORM_COMMENT;
            }
          // fall through
          case 58: break;
          case 22:
            { return PhelTypes.HASH_BRACE;
            }
          // fall through
          case 59: break;
          case 23:
            { yybegin(MULTILINE_COMMENT); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 60: break;
          case 24:
            { return PhelTypes.COMMA_AT;
            }
          // fall through
          case 61: break;
          case 25:
            { return PhelTypes.DOTDASH;
            }
          // fall through
          case 62: break;
          case 26:
            { return PhelTypes.KEYWORD_TOKEN;
            }
          // fall through
          case 63: break;
          case 27:
            { return PhelTypes.COLONCOLON;
            }
          // fall through
          case 64: break;
          case 28:
            { return PhelTypes.CHAR;
            }
          // fall through
          case 65: break;
          case 29:
            { return PhelTypes.FN_SHORT;
            }
          // fall through
          case 66: break;
          case 30:
            { return PhelTypes.TILDE_AT;
            }
          // fall through
          case 67: break;
          case 31:
            { yybegin(YYINITIAL); return PhelTypes.MULTILINE_COMMENT;
            }
          // fall through
          case 68: break;
          case 32:
            { return PhelTypes.BINNUM;
            }
          // fall through
          case 69: break;
          case 33:
            { return PhelTypes.OCTNUM;
            }
          // fall through
          case 70: break;
          case 34:
            { return PhelTypes.HEXNUM;
            }
          // fall through
          case 71: break;
          case 35:
            { return PhelTypes.NAN;
            }
          // fall through
          case 72: break;
          case 36:
            { return PhelTypes.NIL;
            }
          // fall through
          case 73: break;
          case 37:
            { return PhelTypes.BOOL;
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
